// OpenGLDisplayPlugin_present.frag

LAYOUT(binding=0) uniform sampler2D colorMap;

layout(location=0) in vec2 varTexCoord0;

layout(location=0) out vec4 outFragColor;

float sRGBFloatToLinear(float value) {
    const float SRGB_ELBOW = 0.04045;

    return mix(pow((value + 0.055) / 1.055, 2.4), value / 12.92, float(value <= SRGB_ELBOW));
}

vec3 colorToLinearRGB(vec3 srgb) {
    return vec3(sRGBFloatToLinear(srgb.r), sRGBFloatToLinear(srgb.g), sRGBFloatToLinear(srgb.b));
}

void main(void) {
    vec4 fetched = texture(colorMap, varTexCoord0);
    //outFragColor = fetched;
    outFragColor.a = fetched.a;
    outFragColor.rgb = pow(fetched.rgb, vec3(2.2));

  /*  int vSize = 300;
    int hSize = 400;

    if (gl_FragCoord.y < vSize) {
        finalColor *= pow(2.0, 0.1);
    }
    else if (gl_FragCoord.y > 2 * vSize) {
        finalColor *= pow(2.0, -0.1);
    }
    else {
        finalColor;
    }

    if (gl_FragCoord.x <hSize) {
        outFragColor.rgb = colorToLinearRGB(finalColor);
    } else if (gl_FragCoord.x > 2 * hSize) {
        outFragColor.rgb = pow(finalColor, vec3(1.0 / 2.2));
    }
    else {
        outFragColor.rgb = finalColor;
    }*/
  //  outFragColor.rgb = sqrt(finalColor);
}
