<!
//  gpu/TransformState.slh
//
//  Created by Sam Gateau on 2/10/15.
//  Copyright 2013 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not GPU_TRANSFORM_STATE_SLH@>
<@def GPU_TRANSFORM_STATE_SLH@>

<@func declareStandardCameraTransform()@>
struct TransformCamera {
    mat4 _view;
    mat4 _viewInverse;
    mat4 _projectionViewUntranslated;
    mat4 _projection;
    mat4 _projectionInverse;
    vec4 _viewport;
};

layout(std140) uniform transformCameraBuffer {
#ifdef GPU_TRANSFORM_IS_STEREO
    TransformCamera _camera[2];
#else
    TransformCamera _camera;
#endif
};

#ifdef GPU_TRANSFORM_IS_STEREO
#ifdef VERTEX_SHADER
flat out int _stereoSide;
#endif

#ifdef PIXEL_SHADER
flat in int _stereoSide;
#endif
#endif

TransformCamera getTransformCamera() {
#ifdef GPU_TRANSFORM_IS_STEREO
#ifdef VERTEX_SHADER
    _stereoSide = gl_InstanceID % 2;
#endif
    return _camera[_stereoSide];
#else
    return _camera;
#endif
}
<@endfunc@>


<@func declareStandardObjectTransform()@>
struct TransformObject {
    mat4 _model;
    mat4 _modelInverse;
};

layout(location=15) in ivec2 _drawCallInfo;

<@if FALSE @>
// Disable SSBOs for now
layout(std140) buffer transformObjectBuffer {
    TransformObject _object[];
};
TransformObject getTransformObject() {
    return _object[_drawCallInfo.x];
}
<@else@>
uniform samplerBuffer transformObjectBuffer;

TransformObject getTransformObject() {
    int offset = 8 * _drawCallInfo.x;
    TransformObject object;
    object._model[0] = texelFetch(transformObjectBuffer, offset);
    object._model[1] = texelFetch(transformObjectBuffer, offset + 1);
    object._model[2] = texelFetch(transformObjectBuffer, offset + 2);
    object._model[3] = texelFetch(transformObjectBuffer, offset + 3);

    object._modelInverse[0] = texelFetch(transformObjectBuffer, offset + 4);
    object._modelInverse[1] = texelFetch(transformObjectBuffer, offset + 5);
    object._modelInverse[2] = texelFetch(transformObjectBuffer, offset + 6);
    object._modelInverse[3] = texelFetch(transformObjectBuffer, offset + 7);

    return object;
}
<@endif@>
<@endfunc@>


<@func declareStandardTransform()@>
<$declareStandardCameraTransform()$>
<$declareStandardObjectTransform()$>
<@endfunc@>

<@func transformCameraViewport(cameraTransform, viewport)@>
     <$viewport$> = <$cameraTransform$>._viewport;
<@endfunc@>

<@func transformStereoClipsSpace(cameraTransform, clipPos)@>
    {
#ifdef GPU_TRANSFORM_IS_STEREO
        vec4 eyeClipEdge[2]= vec4[2](vec4(-1,0,0,1), vec4(1,0,0,1));
        vec2 eyeOffsetScale = vec2(-0.5, +0.5);
        uint eyeIndex = _stereoSide;
        gl_ClipDistance[0] = dot(<$clipPos$>, eyeClipEdge[eyeIndex]);
        float newClipPosX = <$clipPos$>.x * 0.5 + eyeOffsetScale[eyeIndex] * <$clipPos$>.w;
        <$clipPos$>.x = newClipPosX;
#else
#endif
    }
<@endfunc@>


<@func transformModelToEyeWorldAlignedPos(cameraTransform, objectTransform, modelPos, eyeWorldAlignedPos)@>
    <!// Bring the model pos in the world aligned space centered on the eye axis !>
    { // _transformModelToEyeWorldAlignedPos
        highp mat4 _mv = <$objectTransform$>._model;
        _mv[3].xyz -= <$cameraTransform$>._viewInverse[3].xyz;
        highp vec4 _eyeWApos = (_mv * <$modelPos$>);
        <$eyeWorldAlignedPos$> = _eyeWApos;
    }
<@endfunc@>

<@func transformModelToClipPos(cameraTransform, objectTransform, modelPos, clipPos)@>
    { // transformModelToClipPos
        vec4 eyeWAPos;
        <$transformModelToEyeWorldAlignedPos($cameraTransform$, $objectTransform$, $modelPos$, eyeWAPos)$>

        <$clipPos$> = <$cameraTransform$>._projectionViewUntranslated * eyeWAPos;
        
        <$transformStereoClipsSpace($cameraTransform$, $clipPos$)$>
    }
<@endfunc@>

<@func transformModelToEyeAndClipPos(cameraTransform, objectTransform, modelPos, eyePos, clipPos)@>
    { // transformModelToEyeAndClipPos
        vec4 eyeWAPos;
        <$transformModelToEyeWorldAlignedPos($cameraTransform$, $objectTransform$, $modelPos$, eyeWAPos)$>
        <$clipPos$> = <$cameraTransform$>._projectionViewUntranslated * eyeWAPos;
        <$eyePos$> = vec4((<$cameraTransform$>._view * vec4(eyeWAPos.xyz, 0.0)).xyz, 1.0);
        
        <$transformStereoClipsSpace($cameraTransform$, $clipPos$)$>
    }
<@endfunc@>

<@func transformModelToEyePos(cameraTransform, objectTransform, modelPos, eyePos)@>
    { // transformModelToEyePos
        vec4 eyeWAPos;
        <$transformModelToEyeWorldAlignedPos($cameraTransform$, $objectTransform$, $modelPos$, eyeWAPos)$>
        <$eyePos$> = vec4((<$cameraTransform$>._view * vec4(eyeWAPos.xyz, 0.0)).xyz, 1.0);
    }
<@endfunc@>

<@func transformModelToWorldPos(objectTransform, modelPos, worldPos)@>
    { // transformModelToWorldPos
        <$worldPos$> = (<$objectTransform$>._model * <$modelPos$>);
    }
<@endfunc@>


<@func transformModelToEyeDir(cameraTransform, objectTransform, modelDir, eyeDir)@>
    { // transformModelToEyeDir
        vec3 mr0 = vec3(<$objectTransform$>._modelInverse[0].x, <$objectTransform$>._modelInverse[1].x, <$objectTransform$>._modelInverse[2].x);
        vec3 mr1 = vec3(<$objectTransform$>._modelInverse[0].y, <$objectTransform$>._modelInverse[1].y, <$objectTransform$>._modelInverse[2].y);
        vec3 mr2 = vec3(<$objectTransform$>._modelInverse[0].z, <$objectTransform$>._modelInverse[1].z, <$objectTransform$>._modelInverse[2].z);

        vec3 mvc0 = vec3(dot(<$cameraTransform$>._viewInverse[0].xyz, mr0), dot(<$cameraTransform$>._viewInverse[0].xyz, mr1), dot(<$cameraTransform$>._viewInverse[0].xyz, mr2));
        vec3 mvc1 = vec3(dot(<$cameraTransform$>._viewInverse[1].xyz, mr0), dot(<$cameraTransform$>._viewInverse[1].xyz, mr1), dot(<$cameraTransform$>._viewInverse[1].xyz, mr2));
        vec3 mvc2 = vec3(dot(<$cameraTransform$>._viewInverse[2].xyz, mr0), dot(<$cameraTransform$>._viewInverse[2].xyz, mr1), dot(<$cameraTransform$>._viewInverse[2].xyz, mr2));

        <$eyeDir$> = vec3(dot(mvc0, <$modelDir$>), dot(mvc1, <$modelDir$>), dot(mvc2, <$modelDir$>));
    }
<@endfunc@>

<@func transformEyeToWorldDir(cameraTransform, eyeDir, worldDir)@>
    { // transformEyeToWorldDir
        <$worldDir$> = vec3(<$cameraTransform$>._viewInverse * vec4(<$eyeDir$>.xyz, 0.0));
    }
<@endfunc@>

<@func transformClipToEyeDir(cameraTransform, clipPos, eyeDir)@>
    { // transformClipToEyeDir
        <$eyeDir$> = vec3(<$cameraTransform$>._projectionInverse * vec4(<$clipPos$>.xyz, 1.0)); // Must be 1.0 here
    }
<@endfunc@>

<@func transformEyeToClipPos(cameraTransform, eyePos, clipPos)@>
    { // transformEyeToClipPos
        <$clipPos$> = <$cameraTransform$>._projection * vec4(<$eyePos$>.xyz, 1.0);

        <$transformStereoClipsSpace($cameraTransform$, $clipPos$)$>
    }
<@endfunc@>

<@endif@>
