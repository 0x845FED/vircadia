<!
//  gpu/TransformState.slh
//
//  Created by Sam Gateau on 2/10/15.
//  Copyright 2013 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not GPU_TRANSFORM_STATE_SLH@>
<@def GPU_TRANSFORM_STATE_SLH@>

struct TransformObject { 
    mat4 _model;
    mat4 _modelInverse;
    mat4 _modelView;
    mat4 _modelViewInverseTranspose;
};

struct TransformCamera { 
    mat4 _projection;
    mat4 _view;
    mat4 _viewInverse;
};

vec4 transform(TransformCamera camera, TransformObject object, vec4 pos) {
    
    return camera._projection * (object._modelView * pos);
}

vec3 transformDir(TransformCamera camera, TransformObject object, vec3 dir) {
    return (object._modelViewInverseTranspose * vec4(dir, 0.0)).xyz;
}

<@if GLPROFILE == PC_GL@>
uniform transformObjectBuffer {
    TransformObject object;
};
TransformObject getTransformObject() {
    return object;
}

uniform transformCameraBuffer {
    TransformCamera camera;
};
TransformCamera getTransformCamera() {
    return camera;
}
<@elif GLPROFILE == MAC_GL@>
uniform vec4 transformStateBuffer[2];
TransformState getTransformState() {
    TransformState xform;
    xform._diffuse = transformStateBuffer[0];
    xform._specular = transformStateBuffer[1];
    return xform;
}
<@else@>
uniform vec4 transformStateBuffer[2];
TransformState getMaterial() {
    TransformState xform;
    xform._diffuse = transformStateBuffer[0];
    xform._specular = transformStateBuffer[1];
    return xform;   
}
<@endif@>


<@endif@>
