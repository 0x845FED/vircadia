Base properties...
    * type
    * position
    * size/radius/bounds?? maybe correct is x,y,z scales
    * rotation
    * script
    * velocity
    * gravity
    * damping
    * mass
    * glow level
    * lifetime

should these be included for all entities? Light, Models, planes, etc?
    * rotational velocity? - wouldn't that be cool to be automatic with no edits
    * rotational damping?? - can you slow a quat rotation by simply multiplying it by a fraction?
    * color??
    
Primitive Object Properties:
    * color?
    * texture?
    
    
Model properties:
    void setModelURL(const QString& url)
    void setAnimationURL(const QString& url)
    void setAnimationFrameIndex(float value)
    void setAnimationIsPlaying(bool value)
    void setAnimationFPS(float value)
    void setSittingPoints(QVector<SittingPoint> sittingPoints) ??? - should this just be a string property??? 

// Things to do with entities...
//
// REQUIRED TO DO:

   
   12a) make sure server is deleting items??
   12b) Use the delete message instead of shouldDelete property

    E) memory leaks???
   22) Import/Export Models - verify it works. /copy/paste??
        22a) void ModelItemProperties::copyFromNewModelItem(const ModelItem& modelItem); // XXX ??? Do we need this????
        22b) Local Entities Overlay - from Local Models Overlay
        22c) void ModelTree::sendModels(ModelEditPacketSender* packetSender, float x, float y, float z)....
             bool EntityTree::sendEntitiesOperation(OctreeElement* element, void* extraData) {...
        DONE -- 22d) void ModelTree::findModelsInCube(const AACube& cube, QVector<ModelItem*>& foundModels)...
        DONE -- 22e) void ModelTreeElement::getModelsInside(const AACube& box, QVector<ModelItem*>& foundModels)...

   13) support sitpoints and referentials....
    Q) Referentials????
   
            For sitting points and referentials you can kill two birds with one stone.
            Put this model in world: http://highfidelity-public.s3-us-west-1.amazonaws.com/ozan/theater.fst
            Launch sit.js
            See sitting points
            Sit somewhere
            Move model with another avatar.
            Observe first avatar moving.   
   
    K) verify shadows work
    
    N) Handle the ID -> UUID swap in old files to new files
    
    O) Test models -> attachments logic
    
   
    S) What happens if the edit properties don't fit in a single message MTU???
    T) animations not always working?????

    W) EntityItemProperties::decodeEntityEditPacket() doesn't include PROP_SCRIPT
    
// NICE TO DO:

    D) update and verify all particle examples to use new entity features

    Ac) implement support for requestedProperties in appendEntityData() that only include CHANGED properties for the viewer...
    Az) visible???

    P) unit tests?
    Pa) OctreeTests::modelItemTests()...????

    G) why does is the Box entity not drawn in it's bounds
    H) make the rotated model bounds work for other entity types?
    I) maybe make "hasGeometry" be a property of EntityItem base class??


    J) handle subclass properties?
        
        We use properties for addEntity(id, props) -
            the result should be that the properties are not really understood by the tree, or element, but should be
            storable, passable, and reusable by the subclass entity... so "setProperties()" should be virtual and handle
            storage of any items contained in the properties
            
            getProperties() examples:
                Application::exportModels()
                EntityScriptingInterface::getEntityProperties()
                EntityScriptingInterface::findRayIntersection/Blocking/Worker()

            setProperties() examples:
                EntityItem::EntityItem(const EntityItemID& entityItemID, const EntityItemProperties& properties); /// ??????
                UpdateEntityOperator - this seems like it should be able to be virtual and work well.
                EntityTreeElement::addOrUpdateEntity() -- same use case as UpdateEntityOperator...


        basic properties features use getter/setter....
        all others use:
            set('propertyName', value)... but... we need to know the type of value 
            
            setStringProperty('name', const QString& value);
            QString getStringProperty('name');

            setFloatProperty('name', float value);
            float getFloatProperty('name');
            
    1) consider moving type to front of buffers to make construction easier
    3) The moving/pruning logic...
           The old code used the update loop to handle pruning entities from the
           incorrect tree element when they no longer were the best fit

    4) can render happen while update is occurring? will this result in flicker??

    6) are we actually deleting the entities after deleteEntity???
       Looks like the server is not actually deleting the items, and so they get resent into the scene.

    10) What's wrong with this picture... we have 3 entities in our map but all have been deleted!!!
            [DEBUG] [2014-07-28 21:40:52 -0700] [41554:24258] [entity-server] EntityTree::debugDumpMap() -------------------------- 
            [DEBUG] [2014-07-28 21:40:52 -0700] [41554:24258] [entity-server] [ id: 1 , creatorTokenID: 2 , isKnownID: true ] :  0x7fd71be05970 
            [DEBUG] [2014-07-28 21:40:52 -0700] [41554:24258] [entity-server] [ id: 2 , creatorTokenID: 3 , isKnownID: true ] :  0x7fd71be05970 
            [DEBUG] [2014-07-28 21:40:52 -0700] [41554:24258] [entity-server] [ id: 0 , creatorTokenID: 1 , isKnownID: true ] :  0x7fd71be05970 
            [DEBUG] [2014-07-28 21:40:52 -0700] [41554:24258] [entity-server] ----------------------------------------------------- 

    11) assert in qBitArray

         [DEBUG] [2014-07-28 21:49:15 -0700] [41950:24258] [entity-server] EntityTree::processEditPacketData().... 
         [FATAL] [2014-07-28 21:49:15 -0700] [41950:24258] [entity-server] ASSERT: "uint(i) < uint(size())" in file /usr/local/Cellar/qt5/5.2.0/lib/QtCore.framework/Headers/qbitarray.h, line 122
         Abort trap: 6

    13b) add user properties
    14) implement "Light" entity, "Fire" entity?


    21) LOD - we've never supported LOD in model server other than not recursing into nodes that can't be seen.
    21a) LOD - at higher level nodes with entities that are small, handle don't include small entities for LOD setting would not have sent them.
    21b) LOD - generalized "re-averaging"?
          how can we allow an entity to present itself to a higher level as an average?
               for models - we've talked about storing them as voxels...
               for models - if we had access to mesh, we could use numerous mesh LOD algorithms out there

        
       


    23) xColor vs rbgColor????
    24) get rid of EntityItem::expectedBytes()...


    25) consider moving the EntityTypes static Maps to be inside a singleton instance of EntityTypes to ensure initialization order
    26) Why can't we call REGISTER_ENTITY_TYPE() in BoxEntityType.cpp or the CPP of the implementation?
    27) Consider making properties of the entities be registered... and handle their streaming in a more automatice fashion


    28) crash on startup of client sometimes...

    Thread 46 Crashed:: QThread
    0   QtCore                        	0x000000010d189e47 QHashData::nextNode(QHashData::Node*) + 7
    1   io.highfidelity.Interface     	0x000000010bce2189 QHash<QUuid, EditPacketBuffer>::iterator::operator++(int) + 41 (qhash.h:378)
    2   io.highfidelity.Interface     	0x000000010bce109a OctreeEditPacketSender::releaseQueuedMessages() + 154 (OctreeEditPacketSender.cpp:306)
    3   io.highfidelity.Interface     	0x000000010bf17bb3 ScriptEngine::run() + 2099 (ScriptEngine.cpp:433)
    4   io.highfidelity.Interface     	0x000000010b97444e void QtPrivate::FunctionPointer<void (ScriptEngine::*)()>::call<void, void>(void (ScriptEngine::*)(), ScriptEngine*, void**) + 142 (qobjectdefs_impl.h:142)
    5   io.highfidelity.Interface     	0x000000010b97432a QtPrivate::QSlotObject<void (ScriptEngine::*)(), void, void>::impl(int, QtPrivate::QSlotObjectBase*, QObject*, void**, bool*) + 202 (qobject_impl.h:150)
    6   QtCore                        	0x000000010d34383b QMetaObject::activate(QObject*, int, int, void**) + 2139
    7   QtCore                        	0x000000010d12aba5 QThreadPrivate::start(void*) + 309
    8   libsystem_pthread.dylib       	0x00007fff8bb96899 _pthread_body + 138
    9   libsystem_pthread.dylib       	0x00007fff8bb9672a _pthread_start + 137
    10  libsystem_pthread.dylib       	0x00007fff8bb9afc9 thread_start + 13

    X) multiple copies of entities in saved file??? --- may be fixed after implementing prune correctly
        repro: launch an entity....
        [DEBUG] [2014-08-12 14:28:31 -0700] [7188:323] [entity-server] EntityTypes::constructEntityItem(data, bytesToRead).... NEW BITSTREAM!!! actualID= QUuid("{00400000-4040-0000-0088-000000008007}") 
        [DEBUG] [2014-08-12 14:28:31 -0700] [7188:323] [entity-server] EntityTypes::constructEntityItem(data, bytesToRead).... NEW BITSTREAM!!! entityType= 0 
        [DEBUG] [2014-08-12 14:28:31 -0700] [7188:323] [entity-server] EntityTypes::constructEntityItem(data, bytesToRead).... NEW BITSTREAM!!! actualID= QUuid("{00400000-4040-0000-0088-000000008007}") 
        [DEBUG] [2014-08-12 14:28:31 -0700] [7188:323] [entity-server] EntityTypes::constructEntityItem(data, bytesToRead).... NEW BITSTREAM!!! entityType= 0 
        [DEBUG] [2014-08-12 14:28:31 -0700] [7188:323] [entity-server] EntityTypes::constructEntityItem(data, bytesToRead).... NEW BITSTREAM!!! actualID= QUuid("{00000f00-0000-065f-f827-000000000000}") 
        [DEBUG] [2014-08-12 14:28:31 -0700] [7188:323] [entity-server] EntityTypes::constructEntityItem(data, bytesToRead).... NEW BITSTREAM!!! entityType= 0 
        [DEBUG] [2014-08-12 14:28:31 -0700] [7188:323] [entity-server] EntityTypes::constructEntityItem(data, bytesToRead).... NEW BITSTREAM!!! actualID= QUuid("{00000f00-0000-065f-f827-000000000000}") 
    


===============


// SOLVED - 5) crash in client assert on addEntity() assetting that not viewing???
// SOLVED - 7) when changing properties that include position OR radius, but not both the update logic gets confused.
// SOLVED - 8) in assignEntityID() we assert if the containing element exists... this is too harsh, what if someone sends us a bad packet
//             -- fixed this by only storing assigned IDs in the server's ID base
// SOLVED - 9) problem here... looks like the client got confused and sent us an unknown edit packet with a creator token id we already had...
//             we probably can't keep the creator tokens in our server tree or else we'll collide between multiple editors!!
//             -- fixed this by only storing assigned IDs in the server's ID base
// SOLVED - 15) fix all places where "Voxels" turns off some features of models/entities
// SOLVED - 16) duplicate copies of entity references in the elements... this appears to be caused when "viewing" while editing...
// SOLVED - 17) Handle the newer on client vs changed on server problem properly for entities
// SOLVED - 20) Verified that multiple machines viewing real time edits works - fixed bugs in lastEdited.
// SOLVED - b) entities have same ID? unknown??? - wasn't setting ID on read from buffer...
// SOLVED - a) crash in entity server on add entity? 
// SOLVED - 8) addOrUpdateEntity()
// SOLVED - B) enable animation in model class
// SOLVED - 18) change ID's to UUIDS????
// SOLVED - L) sometimes assert/crashes in server about containing element? I think we're adding entityIDs with UNKNOWN_ID to our maps
//             this crash is definitely caused by starting a server with an existing models file which has ID's already in use...
// SOLVED - M) change EntityTree::handleAddEntityResponse() to not scan entire tree... it can use the containing element stuff!!!
// SOLVED - F) TODO: do we need to handle "killing" viewed entities as well???
//             void EntityTreeElement::updateEntityItemID(const EntityItemID& creatorTokenEntityID, const EntityItemID& knownIDEntityID)...
// SOLVED - R) move to EntityItemProperties
//                        EntityItem::encodeEntityEditMessageDetails()
//                        EntityTypes::decodeEntityEditPacket()
// SOLVED - Aa) handle sublass appendEntityData() and readEntityItemIDFromBuffer() similar to how we 
//                  handle setProperty()/getProperty() so that each subclass doesn't have to completely reimplement
//                  the entire base class data stream...
// SOLVED - Ab) implement support for requestedProperties in appendEntityData() to be virtual to handle various subclasses
// SOLVED - A) add velocity, gravity, damping to entity base class
// SOLVED - 2) EntityTree::update()/EntityTreeElement::update()... velocity changes...
// SOLVED - C) verify "update" works
// SOLVED - V) crash/assert when you move an entity out of domain bounds???
// SOLVED - U) UNEXPECTED -- OctreeElement::getMyChildContaining() cubeScale=[0.000012] > ourScale=[0.000004] 
// SOLVED - 19) what about??? rememberDirtyCube()... -- removed it... not needed
// SOLVED - zz) what about editing/edit messages... moved to EntityItemProperties...
//     EntityItem::encodeEntityEditMessageDetails() -- this could be a member of EntityItemProperties
//     EntityTypes::decodeEntityEditPacket() -- this could be a member of EntityItemProperties
// SOLVED - 12) change delete to use delete messages instead of shouldBeDeleted property
