<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//  model.frag
//  fragment shader
//
//  Copyright 2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//


// the glow intensity
uniform float glowIntensity;

// the alpha threshold
uniform float alphaThreshold;

float evalOpaqueFinalAlpha(float alpha, float mapAlpha) {
    return mix(alpha * glowIntensity, 1.0 - alpha * glowIntensity, step(mapAlpha, alphaThreshold));
}

void packDeferredFragment(vec3 normal, float alpha, vec3 diffuse, vec3 specular, float shininess) {
    if (alpha != glowIntensity) {
        discard;
    }
    gl_FragData[0] = vec4(diffuse.rgb, alpha);
    gl_FragData[1] = vec4(normal, 0.0) * 0.5 + vec4(0.5, 0.5, 0.5, 1.0);
    gl_FragData[2] = vec4(specular, shininess / 128.0);
}

<@include model/Material.slh@>

// the diffuse texture
uniform sampler2D xMap;
uniform sampler2D yMap;

// the interpolated normal
varying vec4 interpolatedNormal;

varying vec3 color;


void main(void) {
    // Fetch diffuse map
    // vec4 diffuse = texture2D(xMap, interpolatedNormal.xz * 0.5 + vec2(0.5));

    Material mat = getMaterial();

    packDeferredFragment(
        normalize(interpolatedNormal.xyz),
        0.0,
        /*getMaterialDiffuse(mat)*/ /*diffuse.rgb * */ vec3(1.0, 1.0, 1.0),
        /*getMaterialSpecular(mat)*/ vec3(0.02, 0.02, 0.02),
        /*getMaterialShininess(mat)*/ 10.0);
}
