<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  paintStroke.frag
//  fragment shader
//
//  Created by Andrzej Kapolka on 9/15/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferWrite.slh@>


// the diffuse texture
uniform sampler2D originalTexture;

// the interpolated normal
varying vec4 interpolatedNormal;
varying vec4 modelPosition;
varying vec2 varTexcoord;

float rand(vec2 point){
    return fract(sin(dot(point.xy ,vec2(12.9898,78.233))) * 43758.5453);
}



void main(void) {
    
    vec3 newNormal = normalize(interpolatedNormal.xyz);
    
    vec4 texel = texture2D(originalTexture, varTexcoord);
    int frontCondition = 1 -int(gl_FrontFacing) * 2;
   vec3 color = gl_Color.rgb;
   //vec3 normal, float alpha, vec3 diffuse, vec3 specular, float shininess
    packDeferredFragmentTranslucent(
        newNormal * frontCondition,
        texel.a,
        color *texel.rgb,
        vec3(0.01, 0.01, 0.01),
        10.0);
}
