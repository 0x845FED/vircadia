//
//  PhysicalEntity.h
//  libraries/shared/src
//
//  Created by Andrew Meadows 2014.05.30
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

#ifndef hifi_PhysicalEntity_h
#define hifi_PhysicalEntity_h

#include <QVector>

#include <glm/glm.hpp>
#include <glm/gtc/quaternion.hpp>

class Shape;

// PhysicalEntity is the base class for anything that owns one or more Shapes that collide in a 
// SimulationEngine.  Each CollisionInfo generated by a SimulationEngine has back pointers to the 
// two Shapes involved, and those Shapes may (optionally) have valid back pointers to their PhysicalEntity.

class PhysicalEntity {

public:
    enum EntityType {
        ENTITY_UNKNOWN,
        ENTITY_MODEL,
    };

    PhysicalEntity(EntityType type = ENTITY_UNKNOWN);
    virtual ~PhysicalEntity() {}

    void setTranslation(const glm::vec3& translation);
    void setRotation(const glm::quat& rotation);

    const glm::vec3& getTranslation() const { return _translation; }
    const glm::quat& getRotation() const { return _rotation; }
    float getBoundingRadius() const { return _boundingRadius; }

    EntityType getEntityType() const { return _entityType; }

    void setShapeBackPointers();

    void setEnableShapes(bool enable);

    virtual void buildShapes() = 0;
    virtual void clearShapes();

protected:
    EntityType _entityType;
    glm::vec3 _translation;
    glm::quat _rotation;
    float _boundingRadius;
    bool _shapesAreDirty;
    bool _enableShapes;
    QVector<Shape*> _shapes;
};

#endif // hifi_PhysicalEntity_h
