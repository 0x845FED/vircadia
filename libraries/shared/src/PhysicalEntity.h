//
//  PhysicalEntity.h
//  libraries/shared/src
//
//  Created by Andrew Meadows 2014.05.30
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

#ifndef hifi_PhysicalEntity_h
#define hifi_PhysicalEntity_h

#include <QVector>

class Shape;

// PhysicalEntity is the base class for anything that owns one or more Shapes that collide in a 
// SimulationEngine.  Each CollisionInfo generated by a SimulationEngine has back pointers to the 
// two Shapes involved, and those Shapes may (optionally) have valid back pointers to their PhysicalEntity.

class PhysicalEntity {

public:
    enum EntityType {
        ENTITY_UNKNOWN,
        ENTITY_MODEL,
    };

    static void setShapeBackPointers(const QVector<Shape*>& shapes, PhysicalEntity* entity);

    PhysicalEntity(EntityType type = ENTITY_UNKNOWN) : _entityType(type) {}
    virtual ~PhysicalEntity() {}

    EntityType getEntityType() const { return _entityType; }
    
protected:
    EntityType _entityType;
};

#endif // hifi_PhysicalEntity_h
