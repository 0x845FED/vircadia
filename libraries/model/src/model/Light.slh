<!
//  Light.slh
//  fragment shader
//
//  Created by Sam Gateau on 1/25/14.
//  Copyright 2013 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not MODEL_LIGHT_SLH@>
<@def MODEL_LIGHT_SLH@>

struct Light {
    vec4 _position;
    vec4 _direction;
    vec4 _color;
    vec4 _attenuation;
    vec4 _spot;

    vec4 _shadow;
    vec4 _control;
};

vec3 getLightPosition(Light l) { return l._position.xyz; }
vec3 getLightDirection(Light l) { return l._direction.xyz; } // direction is -Z axis

vec3 getLightColor(Light l) { return l._color.rgb; }
float getLightIntensity(Light l) { return l._color.w; }
float getLightAmbientIntensity(Light l) { return l._direction.w; }

 float getLightSpotAngleCos(Light l) {
    return l._spot.x;
}

vec2 getLightSpotOutsideNormal2(Light l) {
    return vec2(-l._spot.y, l._spot.x);
}

float evalLightSpotAttenuation(Light l, float cosA) {
    return pow(cosA, l._spot.w);
}

float getLightRadius(Light l) {
    return l._attenuation.x;
}

float getLightSquareRadius(Light l) {
    return getLightRadius(l) * getLightRadius(l);
}

float getLightCutoffRadius(Light l) {
    return l._attenuation.y;
}

float getLightCutoffIntensity(Light l) {
    return l._attenuation.z;
}

float getLightShowContour(Light l) {
    return l._control.w;
}

float evalLightAttenuation(Light l, float r) {
    float radius = getLightRadius(l);
    float cutoff = getLightCutoffIntensity(l);
    float d = max(r - radius, 0.0);
    float denom = d/radius + 1.0;
    float attenuation = min(1.0, 1.0 / (denom * denom));
    // Scale attenuation using cutoff from maximum radius
    return max(0, (attenuation - cutoff) / (1 - cutoff));
}

<@if GPU_FEATURE_PROFILE == GPU_CORE @>
uniform lightBuffer {
    Light light;
};
Light getLight() {
    return light;
}
<@else@>
uniform vec4 lightBuffer[7];
Light getLight() {
    Light light;
    light._position = lightBuffer[0];
    light._direction = lightBuffer[1];
    light._color = lightBuffer[2];
    light._attenuation = lightBuffer[3];
    light._spot = lightBuffer[4];
    light._shadow = lightBuffer[5];
    light._control = lightBuffer[6];

    return light;
}
<@endif@>



<@endif@>
