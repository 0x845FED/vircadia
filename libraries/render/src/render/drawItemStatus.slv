<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  drawItemStatus.slv
//  vertex shader
//
//  Created by Sam Gateau on 6/30/2015.
//  Copyright 2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Transform.slh@>

<$declareStandardTransform()$>

varying vec4 varColor;

uniform vec3 inBoundPos;
uniform vec3 inBoundDim;
uniform vec4 inStatus;

vec3 paintRainbow(float nv) {
    float v = nv * 5.f;
    if ( v < 0.f )
        return vec3(1.f, 0.f, 0.f);
    else if ( v < 1.f)
        return vec3(1.f, v, 0.f);
    else if ( v < 2.f)
        return vec3(1.f - (v-1.f), 1.f, 0.f);
    else if ( v < 3.f)
        return vec3(0.f, 1.f, (v-2.f));
    else if ( v < 4.f)
        return vec3(0.f, 1.f - (v-3.f), 1.f );
    else if ( v < 5.f)
        return vec3((v-4.f), 0.f, 1.f );
    else 
        return vec3(1.f, 0.f, 1.f);
}

void main(void) {
    const vec2 ICON_PIXEL_SIZE = vec2(10, 10);
    const int NUM_VERTICES = 6;
    const vec4 UNIT_QUAD[NUM_VERTICES] = vec4[NUM_VERTICES](
        vec4(-1.0, -1.0, 0.0, 1.0),
        vec4(1.0, -1.0, 0.0, 1.0),
        vec4(-1.0, 1.0, 0.0, 1.0),
        vec4(-1.0, 1.0, 0.0, 1.0),
        vec4(1.0, -1.0, 0.0, 1.0),
        vec4(1.0, 1.0, 0.0, 1.0)
    );

    vec4 anchorPoint = vec4(inBoundPos, 1.0) + vec4(inBoundDim, 0.0) * vec4(0.5, 0.5, 0.5, 0.0);
    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
    <$transformModelToClipPos(cam, obj, anchorPoint, anchorPoint)$>
    
    int notifNum = gl_VertexID / NUM_VERTICES;
    int twoTriID = gl_VertexID - notifNum * NUM_VERTICES;
    vec4 pos = UNIT_QUAD[twoTriID];

    // Use the status for showing a color ?
    if(notifNum == 0) {
        varColor = vec4(paintRainbow(inStatus.x), 1.0);
    } else if(notifNum == 1) {
        varColor = vec4(paintRainbow(inStatus.y), 1.0);
    } else if(notifNum == 2) {
        varColor = vec4(paintRainbow(inStatus.z), 1.0);
    } else {
        varColor = vec4(paintRainbow(inStatus.w), 1.0);
    }

    vec4 viewport;
    <$transformCameraViewport(cam, viewport)$>;
    vec2 clipIconSize = vec2(ICON_PIXEL_SIZE.x / viewport.z, ICON_PIXEL_SIZE.y / viewport.w);

    //Offset size in pixels
    float offset = 3.5f;
    pos.x += offset * notifNum;

    gl_Position = anchorPoint + (anchorPoint.w * vec4(pos.xy * clipIconSize, 0.0, 0.0));

}