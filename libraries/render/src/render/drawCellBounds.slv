<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  drawCellBounds.slv
//  Vertex shader
//
//  Created by Sam Gateau on 1/25/2016
//  Copyright 2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Transform.slh@>

<$declareStandardTransform()$>

<@include gpu/Color.slh@>
<$declareColorWheel()$>

<!
uniform ivec4 inCellLocation;

const float _size = 32768.0;
const float _invSize = 1.0 / _size;
const vec3 _origin = vec3(-16384.0);

float getSize() { return _size; }
vec3 getOrigin() { return _origin; }

const int MAX_DEPTH  = 15;
const float INV_DEPTH_DIM[16] = float[16]( 
    1.0,
    1.0 / 2.0,
    1.0 / 4.0,
    1.0 / 8.0,
    1.0 / 16.0,
    1.0 / 32.0,
    1.0 / 64.0,
    1.0 / 128.0,
    1.0 / 256.0,
    1.0 / 512.0,
    1.0 / 1024.0,
    1.0 / 2048.0,
    1.0 / 4096.0,
    1.0 / 8192.0,
    1.0 / 16384.0,
    1.0 / 32768.0 );

int getDepthDimension(int depth) { return 1 << depth; }
float getInvDepthDimension(int depth) { return INV_DEPTH_DIM[depth]; }

float getCellWidth(int depth) { return _size * getInvDepthDimension(depth); }
float getInvCellWidth(int depth) { return float(getDepthDimension(depth)) * _invSize; }

vec3 evalPos(ivec3 coord, int depth = MAX_DEPTH) {
    return getOrigin() + vec3(coord) * getCellWidth(depth);
}
vec3 evalPos(ivec3 coord, float cellWidth) {
    return getOrigin() + vec3(coord) * cellWidth;
}

vec4 evalBound(ivec4 loc) {
    float cellWidth = getCellWidth(loc.w);
    return vec4(evalPos(loc.xyz, cellWidth), cellWidth);
}
!>

uniform vec3 inBoundPos;
uniform vec3 inBoundDim;
uniform ivec4 inCellLocation;

out vec4 varColor;


void main(void) {
    const vec4 UNIT_BOX[8] = vec4[8](
        vec4(0.0, 0.0, 0.0, 1.0),
        vec4(1.0, 0.0, 0.0, 1.0),
        vec4(0.0, 1.0, 0.0, 1.0),
        vec4(1.0, 1.0, 0.0, 1.0),
        vec4(0.0, 0.0, 1.0, 1.0),
        vec4(1.0, 0.0, 1.0, 1.0),
        vec4(0.0, 1.0, 1.0, 1.0),
        vec4(1.0, 1.0, 1.0, 1.0)
    );
    const int UNIT_BOX_LINE_INDICES[24] = int[24](
        0, 1,
        1, 3,
        3, 2,
        2, 0,
        4, 5,
        5, 7,
        7, 6,
        6, 4,
        2, 6,
        3, 7,
        0, 4,
        1, 5
    );
    vec4 pos = UNIT_BOX[UNIT_BOX_LINE_INDICES[gl_VertexID]];

    pos.xyz = inBoundPos + inBoundDim * pos.xyz;

    // standard transform
    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
    <$transformModelToClipPos(cam, obj, pos, gl_Position)$>

    varColor = vec4(colorWheel(fract(float(inCellLocation.w) / 5.0)), 1.0);
}