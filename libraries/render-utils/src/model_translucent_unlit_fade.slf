<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  model_translucent_unlit_fade.frag
//  fragment shader
//
//  Created by Olivier Prat on 06/05/17.
//  Copyright 2017 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include graphics/Material.slh@>

<@include graphics/MaterialTextures.slh@>
<$declareMaterialTextures(ALBEDO, ROUGHNESS, _SCRIBE_NULL, _SCRIBE_NULL, EMISSIVE, OCCLUSION)$>
<@include LightingModel.slh@>

<@include Fade.slh@>
<$declareFadeFragment()$>

<@include render-utils/ShaderConstants.h@>

layout(location=RENDER_UTILS_ATTR_TEXCOORD0) in vec2 _texCoord0;
layout(location=RENDER_UTILS_ATTR_COLOR) in vec3 _color;
layout(location=RENDER_UTILS_ATTR_ALPHA) in float _alpha;
layout(location=RENDER_UTILS_ATTR_POSITION_WS) in vec4 _positionWS;

layout(location=0) out vec4 _fragColor;

void main(void) {
    vec3 fadeEmissive;
    FadeObjectParams fadeParams;

    <$fetchFadeObjectParams(fadeParams)$>
    applyFade(fadeParams, _positionWS.xyz, fadeEmissive);

    Material mat = getMaterial();
    BITFIELD matKey = getMaterialKey(mat);
    <$fetchMaterialTexturesCoord0(matKey, _texCoord0, albedoTex)$>

    float opacity = getMaterialOpacity(mat) * _alpha;
    <$evalMaterialOpacity(albedoTex.a, opacity, matKey, opacity)$>;
    <$discardTransparent(opacity)$>;

    vec3 albedo = getMaterialAlbedo(mat);
    <$evalMaterialAlbedo(albedoTex, albedo, matKey, albedo)$>;
    albedo *= _color;
    albedo += fadeEmissive;
    _fragColor = vec4(albedo * isUnlitEnabled(), opacity);
}
