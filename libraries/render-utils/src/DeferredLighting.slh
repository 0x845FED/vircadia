<!
//  DeferredLighting.slh
//  libraries/render-utils/src
//
//  Created by Sam Gateau on 1/15/15.
//  Copyright 2013 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not DEFERRED_LIGHTING_SLH@>
<@def DEFERRED_LIGHTING_SLH@>

// Frag Shading returns the diffuse amount as W and the specular rgb as xyz
vec4 evalFragShading(vec3 fragNormal, vec3 fragLightDir, vec3 fragEyeDir, vec3 specular, float gloss) {
    // Diffuse Lighting
    float diffuseDot = dot(fragNormal, fragLightDir);
    float facingLight = step(0.0, diffuseDot);
    float diffuse = diffuseDot * facingLight;
 
    // Specular Lighting depends on the half vector and the gloss
    vec3 halfDir = normalize(fragEyeDir + fragLightDir);

    float specularPower = facingLight * max(0.0, dot(fragEyeDir, halfDir));
    vec3 reflect = pow(specularPower, gloss * 128.0) * specular;

    return vec4(reflect, diffuse);
}

<@endif@>
