<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Sam Gateau on 6/8/16.
//  Copyright 2016 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//


#define _PI 3.14159265358979523846


uniform sampler2D profileMap;

vec3 scatter(float r) {
    return texture(profileMap, vec2(r * 0.5, 0.5)).xyz;
}


vec3 integrate(float cosTheta, float skinRadius) {
   // Angle from lighting direction.
   float theta = acos(cosTheta);
   vec3 totalWeights = vec3(0.0);
   vec3 totalLight= vec3(0.0);
   vec3 skinColour = vec3(1.0);
   
   float a = -(_PI);
   
   float inc = 0.1;
   
   while (a <= (_PI)) {
       float sampleAngle = theta + a;
       float diffuse = clamp(cos(sampleAngle), 0.0, 1.0);

       // Distance.
       float sampleDist = abs(2.0 * skinRadius * sin(a * 0.5));
       
       // Profile Weight.
       vec3 weights = scatter(sampleDist);
       
       totalWeights += weights;
       totalLight += diffuse * weights /** (skinColour * skinColour)*/;
       a += inc;
   }
   
   vec3 result = sqrt(totalLight / totalWeights);
   
   return min(result, vec3(1.0));
}

in vec2 varTexCoord0;
out vec4 outFragColor;

void main(void) {

    outFragColor = vec4(integrate(varTexCoord0.x * 2.0 - 1, 2.0 * varTexCoord0.y), 1.0);
}

