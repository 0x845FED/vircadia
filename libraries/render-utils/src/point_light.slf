<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  point_light.frag
//  fragment shader
//
//  Created by Sam Gateau on 9/18/15.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

// Everything about deferred buffer
<@include DeferredBufferRead.slh@>

<$declareDeferredCurvature()$>

// Everything about light
<@include model/Light.slh@>

<@include LightingModel.slh@>
<$declareLightingModel()$>

<@include LightPoint.slh@>
<$declareLightingPoint(supportScattering)$>



in vec4 _texCoord0;
out vec4 _fragColor;

void main(void) {
    DeferredFrameTransform deferredTransform = getDeferredFrameTransform();

    // Grab the fragment data from the uv
    vec2 texCoord = _texCoord0.st / _texCoord0.q;
    DeferredFragment frag = unpackDeferredFragment(deferredTransform, texCoord);

    if (frag.mode == FRAG_MODE_UNLIT) {
        discard;
    }

    // Kill if in front of the light volume
    float depth = frag.depthVal;
    if (depth < gl_FragCoord.z) {
        discard;
    }

    // Need the light now
    Light light = getLight();

    // Frag pos in world
    mat4 invViewMat = getViewInverse();
    vec4 fragPos = invViewMat * frag.position;

    // Clip againgst the light volume and Make the Light vector going from fragment to light center in world space
    vec4 fragLightVecLen2;
    if (!clipFragToLightVolumePoint(light, fragPos.xyz, fragLightVecLen2)) {
        discard;
    }

    // Frag to eye vec
    vec4 fragEyeVector = invViewMat * vec4(-frag.position.xyz, 0.0);
    vec3 fragEyeDir = normalize(fragEyeVector.xyz);


    vec3 diffuse;
    vec3 specular;

    if ((isScatteringEnabled() > 0.0) && (frag.mode == FRAG_MODE_SCATTERING)) {
        vec4 blurredCurvature = fetchCurvature(texCoord);
        vec4 diffusedCurvature = fetchDiffusedCurvature(texCoord);
        vec3 midNormal = normalize((blurredCurvature.xyz - 0.5f) * 2.0f);
        vec3 lowNormal = normalize((diffusedCurvature.xyz - 0.5f) * 2.0f);
        float highCurvature = unpackCurvature(blurredCurvature.w);
        float lowCurvature = unpackCurvature(diffusedCurvature.w);
        evalLightingPointScattering(diffuse, specular, light,
            fragLightVecLen2.xyz, fragEyeDir, frag.normal, frag.roughness,
            frag.metallic, frag.specular, frag.diffuse, 1.0,
            frag.scattering, midNormal, lowNormal, lowCurvature);
    } else {
        evalLightingPoint(diffuse, specular, light,
            fragLightVecLen2.xyz, fragEyeDir, frag.normal, frag.roughness,
            frag.metallic, frag.specular, frag.diffuse, 1.0);
    }

    _fragColor.rgb += diffuse * isDiffuseEnabled() * isPointEnabled();
    _fragColor.rgb += specular * isSpecularEnabled() * isPointEnabled();
}
