<!
//  AmbientOcclusion.slh
//  libraries/render-utils/src
//
//  Created by Sam Gateau on 1/1/16.
//  Copyright 2016 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not SSAO_SLH@>
<@def SSAO_SLH@>

<@include render-utils/ShaderConstants.h@>
<@include ssao_shared.h@>

<@func declarePackOcclusionDepth()@>

const float FAR_PLANE_Z = -300.0;

float CSZToDepthKey(float z) {
    return clamp(z * (1.0 / FAR_PLANE_Z), 0.0, 1.0);
}
vec3 packOcclusionDepth(float occlusion, float depth) {
    // Round to the nearest 1/256.0
    float temp = floor(depth * 256.0);
    return vec3(occlusion, temp * (1.0 / 256.0), depth * 256.0 - temp);
}
vec2 unpackOcclusionDepth(vec3 raw) {
    float z = raw.y * (256.0 / 257.0) + raw.z * (1.0 / 257.0);
    return vec2(raw.x, z);
}
<@endfunc@>

<@func declareAmbientOcclusion()@>
<@include DeferredTransform.slh@>
<$declareDeferredFrameTransform()$>

layout(binding=RENDER_UTILS_BUFFER_SSAO_PARAMS) uniform ambientOcclusionParamsBuffer {
    AmbientOcclusionParams params;
};

layout(binding=RENDER_UTILS_BUFFER_SSAO_FRAME_PARAMS) uniform ambientOcclusionFrameParamsBuffer {
    AmbientOcclusionFrameParams frameParams;
};

float getPerspectiveScale() {
    return (params._resolutionInfo.z);
}
int getResolutionLevel() { 
    return int(params._resolutionInfo.x);
}

vec2 getNormalsSideSize() {
    return params._sideSizes[0].xy;
}
int getNormalsResolutionLevel() {
    return int(params._sideSizes[0].z);
}
int getDepthResolutionLevel() {
    return int(params._sideSizes[0].w);
}
vec2 getOcclusionSideSize() {
    return params._sideSizes[1].xy;
}
vec2 getOcclusionSplitSideSize() {
    return params._sideSizes[1].zw;
}

ivec2 getWidthHeightRoundUp(int resolutionLevel) {
    ivec2 fullRes = ivec2(getWidthHeight(0));
    int resolutionDivisor = 1 << resolutionLevel;
    return (fullRes + resolutionDivisor - 1) / resolutionDivisor;
}

float getRadius() {
    return params._radiusInfo.x;
}
float getRadius2() {
    return params._radiusInfo.y;
}
float getInvRadius6() {
    return params._radiusInfo.z;
}

float getObscuranceScaling() {
    return params._radiusInfo.z * params._radiusInfo.w;
}

float isDitheringEnabled() {
    return params._ditheringInfo.x;
}
float isBorderingEnabled() {
    return params._ditheringInfo.w;
}

float getFalloffAngle() {
    return params._ditheringInfo.z;
}
float getFalloffAngleScale() {
    return params._ditheringInfo.y;
}

float getNumSamples() {
    return params._sampleInfo.x;
}
float getInvNumSamples() {
    return params._sampleInfo.y;
}
float getNumSpiralTurns() {
    return params._sampleInfo.z;
}

int doFetchMips() {
    return int(params._sampleInfo.w);
}

<@endfunc@>

<@func declareSamplingDisk()@>

float getAngleDitheringWorldPos(in vec3 pixelWorldPos) {
    vec3 worldPosFract = fract(pixelWorldPos * 1.0);

    ivec3 pixelPos = ivec3(worldPosFract * 256.0);

    return isDitheringEnabled() * float(((3 * pixelPos.x ^ pixelPos.y + pixelPos.x * pixelPos.y) + (3 * pixelPos.y ^ pixelPos.z + pixelPos.x * pixelPos.z)) * 10);
}

float getAngleDithering(in ivec2 pixelPos) {
#if SSAO_USE_QUAD_SPLIT
    return isDitheringEnabled() * frameParams._angleInfo.x;
#else
    // Hash function used in the AlchemyAO paper
    return isDitheringEnabled() *  float((3 * pixelPos.x ^ pixelPos.y + pixelPos.x * pixelPos.y) * 10);
#endif
}

float evalDiskRadius(float Zeye, vec2 sideImageSize) {
    // Choose the screen-space sample radius
    // proportional to the projected area of the sphere
    float diskPixelRadius = -( getProjScale(getResolutionLevel()) * getRadius() / Zeye ) * getPerspectiveScale();

    // clamp the disk to fit in the image otherwise too many unknown
    diskPixelRadius = min(diskPixelRadius, sideImageSize.y * 0.5);

    return diskPixelRadius;
}

const float PI = 3.1415926;
const float TWO_PI = 6.2831852;

vec3 getUnitTapLocation(int sampleNumber, float spiralTurns, float spinAngle, float angleRange){
    // Radius relative to ssR
    float alpha = float(sampleNumber) * getInvNumSamples();
    float angle = alpha * (spiralTurns * angleRange) + spinAngle;
    return vec3(cos(angle), sin(angle), alpha);
}

vec3 getTapLocationSSAO(int sampleNumber, float spinAngle, float outerRadius) {
    vec3 tap = getUnitTapLocation(sampleNumber, getNumSpiralTurns(), spinAngle, TWO_PI);
    tap.xy *= tap.z;
    tap *= outerRadius;
    return tap;
}

vec3 getTapLocationClampedSSAO(int sampleNumber, float spinAngle, float outerRadius, vec2 pixelPos, vec2 sideImageSize) {
    vec3 tap = getTapLocationSSAO(sampleNumber, spinAngle, outerRadius);
    vec2 tapPos = pixelPos + tap.xy;

    if (!(isBorderingEnabled() > 0.0)) {
        return tap;
    }
    bool redoTap = false;

    if ((tapPos.x < 0.5)) {
        tapPos.x = -tapPos.x;
        redoTap = true;
    } else if ((tapPos.x > sideImageSize.x - 0.5)) {
        tapPos.x -= (sideImageSize.x - tapPos.x);
        redoTap = true;
    }

    if ((tapPos.y < 0.5)) {
        tapPos.y = -tapPos.y;
        redoTap = true;
    } else if ((tapPos.y > sideImageSize.y - 0.5)) {
        tapPos.y -= (sideImageSize.y - tapPos.y);
        redoTap = true;
    }

    if (redoTap) {
        tap.xy = tapPos - pixelPos;
        tap.z = length(tap.xy);
        tap.z = 0.0;  
    }
    
    return tap;
}

<@endfunc@>


<@func declareFetchDepthPyramidMap()@>

// the depth pyramid texture
layout(binding=RENDER_UTILS_TEXTURE_SSAO_DEPTH) uniform sampler2D depthPyramidTex;
layout(binding=RENDER_UTILS_TEXTURE_SSAO_NORMAL) uniform sampler2D normalTex;

ivec2 getDepthTextureSize(int level) {
    return textureSize(depthPyramidTex, level);
}
ivec2 getDepthTextureSideSize(int level) {
    ivec2 size = getDepthTextureSize(level);
    size.x >>= int(isStereo()) & 1;
    return size;
}

ivec2 getNormalTextureSize(int level) {
    return textureSize(normalTex, level);
}
ivec2 getNormalTextureSideSize(int level) {
    ivec2 size = getNormalTextureSize(level);
    size.x >>= int(isStereo()) & 1;
    return size;
}

vec2 getStereoSideSizeRoundUp(int resolutionLevel) {
    ivec2 fullRes = ivec2(getStereoSideSize(0));
    int resolutionDivisor = 1 << resolutionLevel;
    return vec2((fullRes + resolutionDivisor - 1) / resolutionDivisor);
}

float getZEyeAtPixel(ivec2 pixel, int level) {
    return -texelFetch(depthPyramidTex, pixel, level).x;
}

float getZEyeAtUV(vec2 texCoord, int level) {
    return -textureLod(depthPyramidTex, texCoord, level).x;
}

float getZEyeAtUV(ivec4 side, vec2 texCoord, int level) {
    texCoord.x = mix(texCoord.x, (texCoord.x + getStereoSide(side)) * 0.5, isStereo());
    return getZEyeAtUV(texCoord, level);
}

vec3 getNormalEyeAtUV(vec2 texCoord, int level) {
    return normalize(textureLod(normalTex, texCoord, level).xyz*2.0 - vec3(1.0));
}

vec3 getNormalEyeAtPixel(ivec2 pixel, int level) {
    return normalize(texelFetch(normalTex, pixel, level).xyz*2.0 - vec3(1.0));
}

int evalMipFromRadius(float radius) {
    const int LOG_MAX_OFFSET = 1;
    const int MAX_MIP_LEVEL = 5;
    return clamp(findMSB(int(radius)) - LOG_MAX_OFFSET, 0, MAX_MIP_LEVEL);
}

vec2 fetchTap(ivec4 side, vec2 tapUV, float tapRadius) {
    int mipLevel = evalMipFromRadius(tapRadius * float(doFetchMips()));

    vec2 fetchUV = clamp(tapUV, vec2(0), vec2(1));
    fetchUV = mix(fetchUV, vec2((fetchUV.x + getStereoSide(side)) * 0.5, fetchUV.y), isStereo());

    vec2 P;
    P.x = float(mipLevel);
    P.y = -textureLod(depthPyramidTex, fetchUV, P.x).x;
    return P;
}

vec3 buildPosition(ivec4 side, vec2 fragUVPos) {
    vec2 fetchUV = clamp(fragUVPos, vec2(0), vec2(1));
    fetchUV.x = mix(fetchUV.x, (fetchUV.x + getStereoSide(side)) * 0.5, isStereo());
    float Zeye = getZEyeAtUV(fetchUV, 0);
    return evalEyePositionFromZeye(side.x, Zeye, fragUVPos);
}

vec3 getMinDelta(vec3 centralPoint, vec3 offsetPointPos, vec3 offsetPointNeg) {
    vec3 delta0 = offsetPointPos - centralPoint;
    vec3 delta1 = centralPoint - offsetPointNeg;
    float sqrLength0 = dot(delta0, delta0);
    float sqrLength1 = dot(delta1, delta1);
    float epsilon = 1e-6;
    return sqrLength0 < sqrLength1 && sqrLength0>epsilon ? delta0 : delta1;
}

vec3 buildNormal(ivec4 side, vec2 fragUVPos, vec3 fragPosition, vec2 deltaDepthUV) {
    vec3 fragPositionDxPos = buildPosition(side, fragUVPos + vec2(deltaDepthUV.x, 0));
    vec3 fragPositionDxNeg = buildPosition(side, fragUVPos - vec2(deltaDepthUV.x, 0));
    vec3 fragPositionDyPos = buildPosition(side, fragUVPos + vec2(0, deltaDepthUV.y));
    vec3 fragPositionDyNeg = buildPosition(side, fragUVPos - vec2(0, deltaDepthUV.y));

    vec3 fragPositionDx = getMinDelta(fragPosition, fragPositionDxPos, fragPositionDxNeg);
    vec3 fragPositionDy = getMinDelta(fragPosition, fragPositionDyPos, fragPositionDyNeg);

    return normalize( cross(fragPositionDx, fragPositionDy) );
}

<@endfunc@>


<@func declareEvalObscurance()@>

vec3 fastAcos(vec3 x) {
	// [Eberly2014] GPGPU Programming for Games and Science
	vec3 absX = abs(x);
	vec3 res = absX * (-0.156583) + vec3(PI / 2.0);
	res *= sqrt(vec3(1.0) - absX);
	return mix(res, vec3(PI) - res, greaterThanEqual(x, vec3(0)));
}

float evalVisibilitySSAO(in vec3 centerPosition, in vec3 centerNormal, in vec3 tapPosition) {
    vec3 v = tapPosition - centerPosition;
    float vv = dot(v, v);
    float vn = dot(v, centerNormal);

    // Falloff function as recommended in SSAO paper
    const float epsilon = 0.01;
    float f = max(getRadius2() - vv, 0.0);
    return f * f * f * max((vn - getFalloffAngle()) / (epsilon + vv), 0.0);
}

float computeHorizonFromTap(vec3 tapPositionES, vec3 fragPositionES, vec3 fragNormalES) {
    const float epsilon = 0.001;

    vec3 deltaVec = tapPositionES - fragPositionES;
    float distance = length(deltaVec);
    float cosHorizonAngle = dot(deltaVec, fragNormalES) / (distance + epsilon);
    float radiusFalloff = max(0.0, 1.0 - (distance*distance / getRadius2()));

    cosHorizonAngle = max(0.0, (cosHorizonAngle - getFalloffAngle()) * getFalloffAngleScale());
    cosHorizonAngle *= radiusFalloff;

    return cosHorizonAngle;
}

<@func computeHorizon()@>
        vec2 tapSideUVPos = tapUVOffset + fragUVPos;
        if (tapSideUVPos.x<0 || tapSideUVPos.y<0 || tapSideUVPos.x>=1.0 || tapSideUVPos.y>=1.0) {
            // Early exit because we've hit the borders of the frame
            break;
        }
        vec2 tapMipZ = fetchTap(side, tapSideUVPos, radius);
        vec3 tapPositionES = evalEyePositionFromZeye(side.x, tapMipZ.y, tapSideUVPos);
        float tapCosHorizonAngle = computeHorizonFromTap(tapPositionES, fragPositionES, fragNormalES);

        cosHorizonAngle = max(cosHorizonAngle, tapCosHorizonAngle);
        
<@endfunc@>

#define HBAO_HORIZON_SEARCH_CONSTANT_STEP 0

float computeHorizon(ivec4 side, vec2 fragUVPos, vec3 fragPositionES, vec3 fragNormalES, vec2 searchVec, vec2 pixelSearchVec, float searchRadius) {
    vec2 absSearchVec = abs(searchVec);
    pixelSearchVec = abs(pixelSearchVec);
    int stepCount = int(ceil(max(pixelSearchVec.x, pixelSearchVec.y)));
    float cosHorizonAngle = 0.0;

    if (stepCount>0) {
        vec2 deltaTapUV = searchVec / float(stepCount);
        float deltaRadius = searchRadius / float(stepCount);
        vec2 tapUVOffset = vec2(0);

#if HBAO_HORIZON_SEARCH_CONSTANT_STEP
        float radius = 0.0;
        int stepIndex;

        for (stepIndex=0 ; stepIndex<stepCount ; stepIndex++) {
            tapUVOffset += deltaTapUV;
            radius += deltaRadius;

            <$computeHorizon()$>
        }
// Step is adapted to Mip level
#else
        float radius = deltaRadius;
        float mipLevel = evalMipFromRadius(radius * float(doFetchMips()));

        while (radius<=searchRadius) {
            tapUVOffset += deltaTapUV;

            <$computeHorizon()$>

            if (tapMipZ.x != mipLevel) {
                mipLevel = tapMipZ.x;
                deltaRadius *= 2;
                deltaTapUV *= 2;
            }
            radius += deltaRadius;
        }
#endif
    }

    return cosHorizonAngle;
}

float evalVisibilityHBAO(ivec4 side, vec2 fragUVPos, vec2 invSideImageSize, vec2 deltaTap, float diskPixelRadius, 
                         vec3 fragPositionES, vec3 fragNormalES) {
    vec2 pixelSearchVec = deltaTap * diskPixelRadius;
	vec2 searchVec = pixelSearchVec * invSideImageSize;
	float obscurance = 0.0;

    // Forward search for h1
    obscurance = computeHorizon(side, fragUVPos, fragPositionES, fragNormalES, searchVec, pixelSearchVec, diskPixelRadius);

    // Backward search for h2
    obscurance += computeHorizon(side, fragUVPos, fragPositionES, fragNormalES, -searchVec, pixelSearchVec, diskPixelRadius);

	return obscurance;
}

<@endfunc@>


<@func declareBlurPass()@>

<$declareAmbientOcclusion()$>
<$declareFetchDepthPyramidMap()$>
<$declarePackOcclusionDepth()$>

// the source occlusion texture
layout(binding=RENDER_UTILS_TEXTURE_SSAO_OCCLUSION) uniform sampler2D occlusionMap;

layout(binding=RENDER_UTILS_BUFFER_SSAO_BLUR_PARAMS) uniform blurParamsBuffer {
    AmbientOcclusionBlurParams blurParams;
};

vec2 getBlurOcclusionAxis() {
    return blurParams._blurAxis.zw;
}

vec2 getBlurDepthAxis() {
    return blurParams._blurAxis.xy;
}

vec2 getBlurOcclusionUVLimit() {
    return blurParams._blurInfo.zw;
}

float getBlurEdgeSharpness() {
    return blurParams._blurInfo.x;
}

int getBlurRadius() {
    return int(blurParams._blurInfo.y);
}

float fetchOcclusion(ivec4 side, vec2 texCoord) {
    texCoord.x = mix(texCoord.x, (texCoord.x + getStereoSide(side)) * 0.5, isStereo());
    vec3 raw = textureLod(occlusionMap, texCoord, 0).xyz;
    return raw.x;
}

const float BLUR_EDGE_DISTANCE_SCALE = 1000.0;

float evalBlurCoefficient(vec2 blurScales, float radialDistance, float zDistance) {
    vec2 distances = vec2(radialDistance, zDistance);
    return exp2(dot(blurScales, distances*distances));
}

vec2 evalTapWeightedValue(vec2 blurScales, ivec4 side, int r, vec2 occlusionTexCoord, vec2 depthTexCoord, float fragDepth) {
    vec2 tapOcclusionTexCoord = getBlurOcclusionAxis() * r + occlusionTexCoord;
    vec2 occlusionTexCoordLimits = getBlurOcclusionUVLimit();

    if (tapOcclusionTexCoord.x < side.x || tapOcclusionTexCoord.x >= (side.x + occlusionTexCoordLimits.x) 
    || tapOcclusionTexCoord.y < 0 || tapOcclusionTexCoord.y >= occlusionTexCoordLimits.y) {
        return vec2(0.0);
    }
    
    float tapOcclusion = fetchOcclusion(side, tapOcclusionTexCoord);

    vec2 tapDepthTexCoord = getBlurDepthAxis() * r + depthTexCoord;
    float tapDepth = getZEyeAtUV(side, tapDepthTexCoord, 0);

    // range domain (the "bilateral" weight). As depth difference increases, decrease weight.
    float zDistance = tapDepth - fragDepth;
    float weight = evalBlurCoefficient(blurScales, abs(r), zDistance);
    
    return vec2(tapOcclusion * weight, weight);
}

vec3 getBlurredOcclusion(ivec2 destPixelCoord, vec2 occlusionTexCoord, vec2 depthTexCoord) {
    // Stereo side info
    ivec4 side = getStereoSideInfo(destPixelCoord.x, 0);

    float fragDepth = getZEyeAtUV(side, depthTexCoord, 0);
    vec2 weightedSums = vec2(0.0);
    
    // Accumulate weighted contributions along the bluring axis in the [-radius, radius] range
    int blurRadius = getBlurRadius();
    float blurRadialSigma = float(blurRadius) * 0.5;
    float blurRadialScale = 1.0 / (2.0*blurRadialSigma*blurRadialSigma);
    vec2 blurScales = -vec2(blurRadialScale, BLUR_EDGE_DISTANCE_SCALE * getBlurEdgeSharpness());

    // negative side first
    for (int r = -blurRadius; r <= -1; ++r) {
        weightedSums += evalTapWeightedValue(blurScales, side, r, occlusionTexCoord, depthTexCoord, fragDepth);
    }
    
    // Central pixel contribution
    float mainWeight = 1.0;
    float pixelOcclusion = fetchOcclusion(side, occlusionTexCoord);
    weightedSums += vec2(pixelOcclusion * mainWeight, mainWeight);

    // then positive side
    for (int r = 1; r <= blurRadius; ++r) {
        weightedSums += evalTapWeightedValue(blurScales, side, r, occlusionTexCoord, depthTexCoord, fragDepth);
    }

    // Final normalization
    const float epsilon = 0.0001;
    float result = weightedSums.x / (weightedSums.y + epsilon);
    
    return vec3(result);
}

<@endfunc@>


<@endif@>
