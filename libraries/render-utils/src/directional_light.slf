<@include Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  directional_light.frag
//  fragment shader
//
//  Created by Andrzej Kapolka on 9/3/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

// Everything about deferred buffer
<@include DeferredBuffer.slh@>

void main(void) {
    DeferredFragment frag = unpackDeferredFragment(gl_TexCoord[0].st);

    vec4 normalVal = frag.normalVal;
    vec4 diffuseVal = frag.diffuseVal;
    vec4 specularVal = frag.specularVal;

    // Light mapped or not ?
    if ((normalVal.a >= 0.45) && (normalVal.a <= 0.55)) {
        gl_FragColor = vec4(diffuseVal.rgb * specularVal.rgb, 1.0);
    } else {
        // compute the base color based on OpenGL lighting model
        float diffuse = dot(frag.normal, gl_LightSource[0].position.xyz);
        float facingLight = step(0.0, diffuse);
        vec3 baseColor = diffuseVal.rgb * (gl_FrontLightModelProduct.sceneColor.rgb +
            gl_FrontLightProduct[0].ambient.rgb + gl_FrontLightProduct[0].diffuse.rgb * (diffuse * facingLight));
        
        // compute the specular multiplier (sans exponent)
        float specular = facingLight * max(0.0, dot(normalize(gl_LightSource[0].position.xyz - normalize(frag.position.xyz)),
            frag.normal));    
        
        // add specular contribution
        vec4 specularColor = specularVal;
        gl_FragColor = vec4(baseColor.rgb + pow(specular, specularColor.a * 128.0) * specularColor.rgb, normalVal.a);
    }
}
