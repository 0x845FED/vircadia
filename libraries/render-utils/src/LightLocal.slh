//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Olivier Prat on 15/01/18.
//  Copyright 2018 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

// Everything about light
<@include model/Light.slh@>
<$declareLightBuffer(256)$>
<@include LightingModel.slh@>


<@include LightPoint.slh@>
<$declareLightingPoint(supportScattering)$>
<@include LightSpot.slh@>
<$declareLightingSpot(supportScattering)$>

<@include LightClusterGrid.slh@>

<@func fetchClusterInfo(fragWorldPos)@>

    // From frag world pos find the cluster
    vec4 clusterEyePos = frustumGrid_worldToEye(<$fragWorldPos$>);
    ivec3 clusterPos = frustumGrid_eyeToClusterPos(clusterEyePos.xyz);

    ivec3 cluster = clusterGrid_getCluster(frustumGrid_clusterToIndex(clusterPos));
    int numLights = cluster.x + cluster.y;
    if (numLights <= 0) {
        discard;
    }

    ivec3 dims = frustumGrid.dims.xyz;
    if (clusterPos.x < 0 || clusterPos.x >= dims.x) {
        discard;
    }

    if (clusterPos.y < 0 || clusterPos.y >= dims.y) {
        discard;
    }
    if (clusterPos.z < 0 || clusterPos.z > dims.z) {
        discard;
    }

<@endfunc@>

vec4 evalLocalLighting(ivec3 cluster, int numLights, vec3 fragWorldPos, vec3 fragNormal, vec3 fragEyeDir, 
                       vec4 midNormalCurvature, vec4 lowNormalCurvature,
                       float fragRoughness, float fragScattering, float fragMetallic, vec3 fragFresnel, vec3 fragAlbedo) {
    vec4 _fragColor = vec4(0.0);
    int lightClusterOffset = cluster.z;

    // Compute the rougness into gloss2 once:
    float fragGloss2 = pow(fragRoughness + 0.001, 4.0);
    bool withScattering = (fragScattering * isScatteringEnabled() > 0.0);

    int numLightTouching = 0;
    for (int i = 0; i < cluster.x; i++) {
        // Need the light now
        int theLightIndex = clusterGrid_getClusterLightId(i, lightClusterOffset);
        Light light = getLight(theLightIndex);

        // Clip againgst the light volume and Make the Light vector going from fragment to light center in world space
        vec4 fragLightVecLen2;
        vec4 fragLightDirLen;

        if (!lightVolume_clipFragToLightVolumePoint(light.volume, fragWorldPos.xyz, fragLightVecLen2)) {
            continue;
        }

        // Allright we re in the light sphere volume
        fragLightDirLen.w = length(fragLightVecLen2.xyz);
        fragLightDirLen.xyz = fragLightVecLen2.xyz / fragLightDirLen.w;
        if (dot(fragNormal, fragLightDirLen.xyz) < 0.0) {
            continue;
        }

        numLightTouching++;

        vec3 diffuse = vec3(1.0);
        vec3 specular = vec3(0.1);

        // Allright we re valid in the volume
        float fragLightDistance = fragLightDirLen.w;
        vec3 fragLightDir = fragLightDirLen.xyz;

        // Eval attenuation
        float radialAttenuation = lightIrradiance_evalLightAttenuation(light.irradiance, fragLightDistance);
        vec3 lightEnergy = radialAttenuation * getLightIrradiance(light);

        // Eval shading
        if (withScattering) {
            evalFragShadingScattering(diffuse, specular, fragNormal, fragLightDir, fragEyeDir, fragMetallic, fragFresnel, fragRoughness, fragAlbedo
                ,fragScattering, midNormalCurvature, lowNormalCurvature );
        } else {
           evalFragShadingGloss(diffuse, specular, fragNormal, fragLightDir, fragEyeDir, fragMetallic, fragFresnel, fragGloss2, fragAlbedo);
        }

        diffuse *= lightEnergy * isDiffuseEnabled();
        specular *= lightEnergy * isSpecularEnabled();

        _fragColor.rgb += diffuse;
        _fragColor.rgb += specular;
    }

    for (int i = cluster.x; i < numLights; i++) {
        // Need the light now
        int theLightIndex = clusterGrid_getClusterLightId(i, lightClusterOffset);
        Light light = getLight(theLightIndex);

        // Clip againgst the light volume and Make the Light vector going from fragment to light center in world space
        vec4 fragLightVecLen2;
        vec4 fragLightDirLen;
        float cosSpotAngle;

        if (!lightVolume_clipFragToLightVolumePoint(light.volume, fragWorldPos.xyz, fragLightVecLen2)) {
            continue;
        }

        // Allright we re in the light sphere volume
        fragLightDirLen.w = length(fragLightVecLen2.xyz);
        fragLightDirLen.xyz = fragLightVecLen2.xyz / fragLightDirLen.w;
        if (dot(fragNormal, fragLightDirLen.xyz) < 0.0) {
            continue;
        }

        // Check spot
        if (!lightVolume_clipFragToLightVolumeSpotSide(light.volume, fragLightDirLen, cosSpotAngle)) {
            continue;
        }

        numLightTouching++;

        vec3 diffuse = vec3(1.0);
        vec3 specular = vec3(0.1);

        // Allright we re valid in the volume
        float fragLightDistance = fragLightDirLen.w;
        vec3 fragLightDir = fragLightDirLen.xyz;

        // Eval attenuation
        float radialAttenuation = lightIrradiance_evalLightAttenuation(light.irradiance, fragLightDistance);
        float angularAttenuation = lightIrradiance_evalLightSpotAttenuation(light.irradiance, cosSpotAngle);
        vec3 lightEnergy = radialAttenuation * angularAttenuation * getLightIrradiance(light);

        // Eval shading
        if (withScattering) {
            evalFragShadingScattering(diffuse, specular, fragNormal, fragLightDir, fragEyeDir, fragMetallic, fragFresnel, fragRoughness, fragAlbedo
                ,fragScattering, midNormalCurvature, lowNormalCurvature );
        } else {
           evalFragShadingGloss(diffuse, specular, fragNormal, fragLightDir, fragEyeDir, fragMetallic, fragFresnel, fragGloss2, fragAlbedo);
        }

        diffuse *= lightEnergy * isDiffuseEnabled();
        specular *= lightEnergy * isSpecularEnabled();

        _fragColor.rgb += diffuse;
        _fragColor.rgb += specular;
    }
    return _fragColor;
}