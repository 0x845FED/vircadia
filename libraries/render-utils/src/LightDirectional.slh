//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Sam Gateau on 7/5/16.
//  Copyright 2016 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//



<@func declareLightingDirectional(supportScattering)@>
<@include DeferredLighting.slh@>

void evalLightingDirectional(out vec3 diffuse, out vec3 specular, Light light,
    vec3 eyeDir, vec3 normal, float roughness,
    float metallic, vec3 fresnel, vec3 albedo, float shadow) {
    
    vec4 shading = evalFragShading(normal, -getLightDirection(light), eyeDir, metallic, fresnel, roughness);

    vec3 lightEnergy = shadow * getLightColor(light) * getLightIntensity(light);

    diffuse = albedo * shading.w * lightEnergy;

    specular = shading.rgb * lightEnergy;
}

<@if supportScattering@>

void evalLightingDirectionalScattering(out vec3 diffuse, out vec3 specular, Light light,
    vec3 eyeDir, vec3 normal, float roughness,
    float metallic, vec3 fresnel, vec3 albedo, float shadow,
    float scattering, vec4 midNormalCurvature, vec4 lowNormalCurvature) {

    vec3 fragLightDir = -normalize(getLightDirection(light));

    evalFragShading(diffuse, specular,
        normal, fragLightDir, eyeDir,
        metallic, fresnel, roughness,
        scattering, midNormalCurvature, lowNormalCurvature);

    vec3 lightEnergy = shadow * getLightColor(light) * getLightIntensity(light);

    diffuse *= albedo * lightEnergy;

    specular *= lightEnergy;
}

<@endif@>

<@endfunc@>

