<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Sam Gateau on 5/16/17.
//  Copyright 2017 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredTransform.slh@>
<$declareDeferredFrameTransform()$>

<@include model/Light.slh@>

<@include LightingModel.slh@>
<$declareLightBuffer()$>

<@include LightDirectional.slh@>
<$declareLightingDirectional(_SCRIBE_NULL)$>

in vec2 varTexCoord0;
out vec4 _fragColor;

void main(void) {

    const float INNER_RADIUS = 1.0;
    const float INNER_RADIUS2 = INNER_RADIUS * INNER_RADIUS;
    const float OUTER_RADIUS = 1.05;
    const float OUTER_RADIUS2 = OUTER_RADIUS * OUTER_RADIUS;
    vec2 sphereUV = (varTexCoord0.xy * 2.0 - vec2(1.0)) * OUTER_RADIUS;
    float sphereR2 = dot(sphereUV.xy, sphereUV.xy);
    if (sphereR2 > OUTER_RADIUS * OUTER_RADIUS) {
        discard;
    }
    if (sphereR2 > INNER_RADIUS2) {
        float falloff = (sphereR2 - OUTER_RADIUS2) / (OUTER_RADIUS2 - INNER_RADIUS2);
        _fragColor = vec4(0.0, 0.0, 0.0, falloff * falloff);
        return;
    }
    vec3 spherePos = normalize(vec3(sphereUV, sqrt(1.0 - sphereR2)));


    vec3 fragNormal = vec3(getViewInverse() * vec4(spherePos, 0.0));


    LightAmbient lightAmbient = getLightAmbient();


    float roughness = 0.1;
    float levels = getLightAmbientMapNumMips(lightAmbient);
    float lod = min(((roughness)* levels), levels);
    vec3 ambientMap = evalSkyboxLight(fragNormal, lod).xyz;
    vec3 ambientSH = sphericalHarmonics_evalSphericalLight(getLightAmbientSphere(lightAmbient), fragNormal).xyz;

   // vec3 ambient = sphericalHarmonics_evalSphericalLight(getLightAmbientSphere(lightAmbient), fragNormal).xyz;
  //  _fragColor = vec4( 0.5  * (fragNormal + vec3(1.0)), 1.0);

    vec3 ambient = (sphereUV.x > 0 ? ambientMap : ambientSH);

    const float INV_GAMMA_22 = 1.0 / 2.2;
    _fragColor = vec4(pow(ambient, vec3(INV_GAMMA_22)), 1.0);
}


