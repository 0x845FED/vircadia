<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  model_normal_specular_map.frag
//  fragment shader
//
//  Created by Andrzej Kapolka on 5/6/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferWrite.slh@>

<@include model/Material.slh@>

<@include MaterialTextures.slh@>
<$declareMaterialTextures(ALBEDO, ROUGHNESS, NORMAL, METALLIC)$>

in vec4 _position;
in vec2 _texCoord0;
in vec3 _normal;
in vec3 _tangent;
in vec3 _color;

void main(void) {
    
    <$fetchMaterialTextures(_texCoord0, albedo, roughnessTex, normalTexel, metallicTex)$>
    
    Material mat = getMaterial();
    int matKey = getMaterialKey(mat);

    float roughness = getMaterialRoughness(mat);
    <$evalMaterialRoughness(roughnessTex, roughness, matKey, roughness)$>;


    vec3 viewNormal;
    <$tangentToViewSpace(normalTexel, _normal, _tangent, viewNormal)$>

    float metallic = getMaterialMetallic(mat);
    <$evalMaterialMetallic(metallicTex, metallic, matKey, metallic)$>;


    packDeferredFragment(
        normalize(viewNormal.xyz), 
        evalOpaqueFinalAlpha(getMaterialOpacity(mat), albedo.a),
        getMaterialAlbedo(mat) * albedo.rgb * _color,
        roughness,
        metallic,
        /*vec3(specular) //*/getMaterialFresnel(mat)
        );
}
