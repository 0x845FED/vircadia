<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  lightClusters_drawGrid.slv
//  Vertex shader
//
//  Created by Sam Gateau on 9/8/2016
//  Copyright 2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Transform.slh@>

<$declareStandardTransform()$>

<@include gpu/Color.slh@>
<$declareColorWheel()$>


struct FrustrumGrid {
    vec4 nearFarRange;
    ivec4 dims;
    mat4 eyeToGridProj;
    mat4 eyeToGridProjInv;
    mat4 worldToEyeMat;
    mat4 eyeToWorldMat;
};

uniform frustrumGridBuffer {
    FrustrumGrid frustrumGrid;
};

//uniform ivec4 inClusterLocation;

out vec4 varColor;


void main(void) {
    const vec4 UNIT_BOX[8] = vec4[8](
        vec4(0.0, 0.0, 0.0, 1.0),
        vec4(1.0, 0.0, 0.0, 1.0),
        vec4(0.0, 1.0, 0.0, 1.0),
        vec4(1.0, 1.0, 0.0, 1.0),
        vec4(0.0, 0.0, 1.0, 1.0),
        vec4(1.0, 0.0, 1.0, 1.0),
        vec4(0.0, 1.0, 1.0, 1.0),
        vec4(1.0, 1.0, 1.0, 1.0)
    );
    const int UNIT_BOX_LINE_INDICES[24] = int[24](
        0, 1,
        1, 3,
        3, 2,
        2, 0,
        4, 5,
        5, 7,
        7, 6,
        6, 4,
        2, 6,
        3, 7,
        0, 4,
        1, 5
    );
    vec4 pos = UNIT_BOX[UNIT_BOX_LINE_INDICES[gl_VertexID]];

  //  pos.z -= 10.0f;


    vec4 eyePos = frustrumGrid.eyeToGridProjInv * (pos);

    eyePos.xyz *= eyePos.w;

    vec4 worldPos = frustrumGrid.eyeToWorldMat * vec4(eyePos.xyz, 1.0);

    /*
    int cellIsEmpty = sign(inClusterLocation.w);
    ivec4 cellLocation = ivec4(inClusterLocation.xyz, (inClusterLocation.w < 0 ? -inClusterLocation.w : inClusterLocation.w));
    vec4 cellBound = evalBound(cellLocation);

    pos.xyz = cellBound.xyz + vec3(cellBound.w) * pos.xyz;
    */
    // standard transform
    TransformCamera cam = getTransformCamera();
    <$transformWorldToClipPos(cam, worldPos, gl_Position)$>

    varColor = vec4(colorWheel(fract(float(gl_VertexID) / 24.0)), 0.9);
}