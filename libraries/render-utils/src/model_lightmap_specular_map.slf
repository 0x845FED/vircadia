<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  model_lightmap_specular_map.frag
//  fragment shader
//
//  Created by Samuel Gateau on 11/19/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferWrite.slh@>

<@include model/Material.slh@>

// the albedo texture
uniform sampler2D albedoMap;

// the emissive map texture and parameters
uniform sampler2D emissiveMap;
uniform vec2 emissiveParams;

// the specular texture
uniform sampler2D specularMap;

in vec4 _position;
in vec2 _texCoord0;
in vec2 _texCoord1;
in vec3 _normal;
in vec3 _color;

void main(void) {
    // set the albedo, normal, specular data
    vec4 albedo = texture(albedoMap, _texCoord0);
    vec3 specular = texture(specularMap, _texCoord0).rgb;
    vec4 emissive = texture(emissiveMap, _texCoord1);

    Material mat = getMaterial();

    packDeferredFragmentLightmap(
        normalize(_normal), 
        evalOpaqueFinalAlpha(getMaterialOpacity(mat), albedo.a),
        getMaterialAlbedo(mat) * albedo.rgb * _color,
        getMaterialRoughness(mat),
        getMaterialMetallic(mat),
        specular, // no use of getMaterialFresnel(mat)
        (vec3(emissiveParams.x) + emissiveParams.y * emissive.rgb));
}
