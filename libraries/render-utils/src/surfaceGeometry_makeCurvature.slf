<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Sam Gateau on 6/3/16.
//  Copyright 2016 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredTransform.slh@>
<$declareDeferredFrameTransform()$>


uniform sampler2D linearDepthMap;
float getZEye(ivec2 pixel) {
    return -texelFetch(linearDepthMap, pixel, 0).x;
}
float getZEyeLinear(vec2 texcoord) {
    return -texture(linearDepthMap, texcoord).x;
}

vec2 signNotZero(vec2 v) {
    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);
}

vec3 oct_to_float32x3(in vec2 e) {
    vec3 v = vec3(e.xy, 1.0 - abs(e.x) - abs(e.y));
    if (v.z < 0) {
        v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);
    }
    return normalize(v);
}

vec2 unorm8x3_to_snorm12x2(vec3 u) {
    u *= 255.0;
    u.y *= (1.0 / 16.0);
    vec2 s = vec2(  u.x * 16.0 + floor(u.y),
    fract(u.y) * (16.0 * 256.0) + u.z);
    return clamp(s * (1.0 / 2047.0) - 1.0, vec2(-1.0), vec2(1.0));
}
vec3 unpackNormal(in vec3 p) {
    return oct_to_float32x3(unorm8x3_to_snorm12x2(p));
}

uniform sampler2D normalMap;
vec3 getWorldNormal(vec2 texcoord) {
    vec3 rawNormal = texture(normalMap, texcoord).xyz;
    return unpackNormal(rawNormal);
}

vec3 getWorldNormalDiff(vec2 texcoord, vec2 delta) {
    vec3 normal0 = getWorldNormal(texcoord - delta);
    vec3 normal1 = getWorldNormal(texcoord + delta);
    return normal1 - normal0;
}

float getEyeDepthDiff(vec2 texcoord, vec2 delta) {
    vec3 normal0 = getWorldNormal(texcoord - delta);
    vec3 normal1 = getWorldNormal(texcoord + delta);
    return getZEyeLinear(texcoord + delta) - getZEyeLinear(texcoord - delta);
}



out vec4 outFragColor;

void main(void) {
    // Pixel being shaded
    ivec2 pixelPos;
    vec2 nclipPos;
    ivec3 stereoSide;
    ivec2 framePixelPos = getPixelPosNclipPosAndSide(gl_FragCoord.xy, pixelPos, nclipPos, stereoSide);

    // Fetch the z under the pixel (stereo or not)
    float Zeye = getZEye(framePixelPos);

    // The position of the pixel fragment in Eye space then in world space
    vec3 eyePos = evalEyePositionFromZeye(stereoSide.x, Zeye, nclipPos);
    vec3 worldPos = (frameTransform._viewInverse * vec4(eyePos, 1.0)).xyz;

    vec3 moduloPos = fract(worldPos);

    outFragColor = vec4(moduloPos, 1.0);
    
    // Calculate the width scale.
    
  //  float distanceToProjectionWindow = 1.0f / tan(0.5f * radians(fov));
    float scale = -getProjScaleEye() / Zeye;
    
    vec2 viewportScale = scale * getInvWidthHeight();

    // Calculate dF/du and dF/dv
    vec2 du = vec2( 1.0f, 0.0f ) * viewportScale.x;
    vec2 dv = vec2( 0.0f, 1.0f ) * viewportScale.y;


    outFragColor = vec4(du.x, dv.y, scale, 1.0);

    vec4 dFdu = vec4(getWorldNormalDiff(nclipPos, du), getEyeDepthDiff(nclipPos, du));
    vec4 dFdv = vec4(getWorldNormalDiff(nclipPos, dv), getEyeDepthDiff(nclipPos, dv));
    dFdu *= step(abs(dFdu.w), 0.1f); dFdv *= step(abs(dFdv.w), 0.1f);

    outFragColor = vec4(dFdu.xyz, 1.0);

    /*
     // Calculate ( du/dx, du/dy, du/dz ) and ( dv/dx, dv/dy, dv/dz )
    float dist = 1.0f; samplePos.w = 1.0f;
    vec2 centerOffset = ((input.texUV - 0.5f) * 2.0f);
    vec4 px =  mul( samplePos + vec4( dist, 0.0f, 0.0f, 0.0f ), matViewProj );
    vec4 py =  mul( samplePos + vec4( 0.0f, dist, 0.0f, 0.0f ), matViewProj );
    vec4 pz =  mul( samplePos + vec4( 0.0f, 0.0f, dist, 0.0f ), matViewProj );
    #ifdef INVERT_TEXTURE_V
        centerOffset.y = -centerOffset.y;
    #endif
    px.xy = ((px.xy / px.w) - centerOffset) / scale; 
    py.xy = ((py.xy / py.w) - centerOffset) / scale; 
    pz.xy = ((pz.xy / pz.w) - centerOffset) / scale; 
    #ifdef INVERT_TEXTURE_V
        px.y = -px.y; py.y = -py.y; pz.y = -pz.y;
    #endif
    
    // Calculate dF/dx, dF/dy and dF/dz using chain rule
    vec4 dFdx = dFdu * px.x + dFdv * px.y;
    vec4 dFdy = dFdu * py.x + dFdv * py.y;
    vec4 dFdz = dFdu * pz.x + dFdv * pz.y;

    // Calculate the mean curvature
    float meanCurvature = ((dFdx.x + dFdy.y + dFdz.z) * 0.33333333333333333) * 100.0;
    outFragColor = vec4( (meanCurvature + 1.0) * 0.5);
    */
}
